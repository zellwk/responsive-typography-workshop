/*! normalize.css v2.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

@font-face {
  font-family: 'Ampersand';
  src: local("Baskerville-Italic"), local("GoudyOldStyleT-Italic"), local("Palatino-Italic"), local("Garamond-Italic");
  unicode-range: U+26; }

html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
  margin: 0;
  padding: 0; }

h1,
h2,
h3,
h4,
h5,
h6 {
  display: block; }

li {
  list-style: none; }

table td {
  border: 1px solid #fff; }

img {
  max-width: 100%;
  height: auto; }

.img--small {
  max-width: 55%;
  margin-left: auto;
  margin-right: auto; }

html {
  font-size: 100%;
  line-height: 1.4; }

html {
  font-family: "Ampersand", "program";
  font-weight: 400; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Ampersand", "program";
  font-weight: 500; }

h1 {
  font-size: 3.8147em;
  line-height: 0.95; }

h2 {
  font-size: 2.44141em;
  line-height: 0.9; }

h2 + ul {
  margin-top: 1.4em; }

h3 {
  font-size: 1em;
  line-height: 1.2; }

h3 + ul {
  margin-top: 0.7em; }

ul + p {
  margin-top: 0.7em; }

strong {
  font-weight: 500; }

code {
  font-size: 0.64em;
  line-height: 1.3;
  font-family: 'Hack', Consolas, 'Andale Mono', 'Courier New', monospace;
  background: rgba(0, 0, 0, 0.1);
  -moz-tab-size: 2;
    -o-tab-size: 2;
       tab-size: 2;
  padding: 0.0875em 0.175em; }

li > code {
  display: inline-block;
  vertical-align: middle; }

pre, style {
  border: 2px solid black; }

pre > code {
  font-size: 100%;
  line-height: 1.4;
  padding: 0.7em 0.7em;
  background: none; }

.slide {
  padding: 4.16667% 4.16667% 8.33333%; }

.slide--single-word {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: column;
      flex-flow: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }

.slide--image {
  background-position: center center;
  background-size: cover; }

.slide--divider {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end; }
  .slide--divider h1 {
    max-width: 80%;
    text-align: right;
    letter-spacing: -0.017em; }

.slide--exercise .slide__header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: baseline;
      -ms-flex-align: baseline;
          align-items: baseline;
  background: -webkit-linear-gradient(currentColor, currentColor) no-repeat;
  background: linear-gradient(currentColor, currentColor) no-repeat;
  background-size: 100% 0.175em;
  background-position: 0 2.0em; }

.slide--exercise .slide__time {
  float: right; }

.slide--exercise .slide__content {
  margin-top: 1.05em; }

.intro .slide__header {
  text-shadow: 0.03em 0 #0F9AF0, -0.03em 0 #0F9AF0, 0.1em 0 #0F9AF0, -0.1em 0 #0F9AF0, 0.2em 0 #0F9AF0, -0.2em 0 #0F9AF0; }

.goodtype .slide__header {
  text-shadow: 0.03em 0 #11D473, -0.03em 0 #11D473, 0.1em 0 #11D473, -0.1em 0 #11D473, 0.2em 0 #11D473, -0.2em 0 #11D473; }

.typesetting .slide__header {
  text-shadow: 0.03em 0 #FABB00, -0.03em 0 #FABB00, 0.1em 0 #FABB00, -0.1em 0 #FABB00, 0.2em 0 #FABB00, -0.2em 0 #FABB00; }

.modular-scale .slide__header {
  text-shadow: 0.03em 0 #F269D9, -0.03em 0 #F269D9, 0.1em 0 #F269D9, -0.1em 0 #F269D9, 0.2em 0 #F269D9, -0.2em 0 #F269D9; }

.vertical-rhythm .slide__header {
  text-shadow: 0.03em 0 #292339, -0.03em 0 #292339, 0.1em 0 #292339, -0.1em 0 #292339, 0.2em 0 #292339, -0.2em 0 #292339; }

.msvr .slide__header {
  text-shadow: 0.03em 0 #345055, -0.03em 0 #345055, 0.1em 0 #345055, -0.1em 0 #345055, 0.2em 0 #345055, -0.2em 0 #345055; }

.break .slide__header {
  text-shadow: 0.03em 0 #111, -0.03em 0 #111, 0.1em 0 #111, -0.1em 0 #111, 0.2em 0 #111, -0.2em 0 #111; }

.rp .slide__header {
  text-shadow: 0.03em 0 #C6D5DC, -0.03em 0 #C6D5DC, 0.1em 0 #C6D5DC, -0.1em 0 #C6D5DC, 0.2em 0 #C6D5DC, -0.2em 0 #C6D5DC; }

.rms .slide__header {
  text-shadow: 0.03em 0 #8d97b9, -0.03em 0 #8d97b9, 0.1em 0 #8d97b9, -0.1em 0 #8d97b9, 0.2em 0 #8d97b9, -0.2em 0 #8d97b9; }

.rvr .slide__header {
  text-shadow: 0.03em 0 #CF9E6E, -0.03em 0 #CF9E6E, 0.1em 0 #CF9E6E, -0.1em 0 #CF9E6E, 0.2em 0 #CF9E6E, -0.2em 0 #CF9E6E; }

.auto .slide__header {
  text-shadow: 0.03em 0 #D05374, -0.03em 0 #D05374, 0.1em 0 #D05374, -0.1em 0 #D05374, 0.2em 0 #D05374, -0.2em 0 #D05374; }

.intro {
  background: #0F9AF0;
  color: #fff; }

.goodtype {
  background: #11D473;
  color: #fff; }

.typesetting {
  background: #FABB00;
  color: #333; }

.modular-scale {
  background: #F269D9;
  color: #222; }

.vertical-rhythm {
  background: #292339;
  color: #fff; }

.msvr {
  background: #345055;
  color: #fff; }

.break {
  background: #111;
  color: #fff; }

.rp {
  background: #C6D5DC;
  color: #111; }

.rms {
  background: #8d97b9;
  color: #333; }

.rvr {
  background: #CF9E6E;
  color: #333; }

.auto {
  background: #D05374;
  color: #121212; }

.centered {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  width: 100%;
  height: 100%;
  text-align: center; }
  .centered h2, .centered h3 {
    display: inline-block; }
  .centered img {
    display: block; }

.centered .book {
  display: inline-block;
  position: relative;
  max-width: 9.1em; }
  .centered .book:before {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    -webkit-filter: drop-shadow(0 0 0.7em rgba(0, 0, 0, 0.25));
            filter: drop-shadow(0 0 0.7em rgba(0, 0, 0, 0.25));
    content: ''; }
  .centered .book:nth-child(1) {
    -webkit-transform: rotate(-10deg);
            transform: rotate(-10deg); }
  .centered .book:nth-child(2) {
    -webkit-transform: rotate(10deg);
            transform: rotate(10deg); }

.slide li {
  margin-left: 1.35em;
  list-style-type: square; }

.dismissed {
  opacity: 0.3; }

/*# sourceMappingURL=data:application/json;base64, */
